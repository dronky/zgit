/* rexx */
/* allow parse case-sensetive params */
parse ARG IP URL
dsn='path.to.dataset'
userlib='path.to.local.joblib'
/* URL = '/mvsds/''path.to.remote.joblib''' */
say 'url:'url
/*------------------------------------------------------------------*/
hostname = 'your.hostname'
Port = '80'
pPort = Port
call Socket 'Initialize','HTTPGET'
sPort = Socket('Socket')
call Socket 'Setsockopt', sPort, 'SOL_SOCKET', 'SO_ASCII', 'ON'
call Socket 'Connect', sPort, 'AF_INET' pPort ip
HTTP_rc = src
/*------------------------------------------------------------------*/
if (HTTP_rc <> 0 ) then do
  say HTTP_rc
  say "HTTP server not responding"
end
else do
  say "Connected to HTTP Server"
  CRLF = '0D15'x
  r.1 = "GET" URL "HTTP/1.1"
  r.2 = "Host:" hostname
  r.0 = 2
do i=1 to r.0
  call Socket 'Write', sPort, r.i!!'0D15'x
end
call Socket 'Write', sPort, '0D15'x
ContentLength = SockRead()
/* For HFS server need call READ twice */
/* for ibm http server (on 2.2) call once */
/* ContentLength = SockRead() */
if (ContentLength > 0) then do
  "ALLOC DA('"dsn"') F(OUTDD) MOD KEEP"
  "NEWSTACK"
  say 'number of strings: 'h.0
/* Handle headers. If empty line found - i+1 -> message length, */
/*                                       i+2 -> message body    */
  do i=1 to h.0
    if h.i == '' then leave
  end
  i=i+2
/* call Qadd h.i*/
  return h.i
  "EXECIO * DISKW OUTDD (FINIS"
  "DELSTACK"
  "FREE F(OUTDD)"
end
end

/*------------------------------------------------------------------*/
Quit:
/* not necessary: call Socket 'Write', sPort, 'quit'!!CRLF */
call Socket 'Close', sPort
call Socket 'Terminate'
exit 0
/*----- put JOB text into queue  -----------------------------------*/
Qadd:
line = arg(1)
do j = 1 BY 1 WHILE line <> ''
/* hex(25) - End Of Line separator */
  PARSE VAR line strings.j '25'x line
  QUEUE strings.j
  /&  say 'STR.'j ' ' strings.j */
end
return 0

/*-----REXX/Socket Call Procedure-----------------------------------*/
Socket:
procedure expose ecpref ecname initialized src res
a0 = arg(1)
a1 = arg(2)
a2 = arg(3)
a3 = arg(4)
a4 = arg(5)
a5 = arg(6)
a6 = arg(7)
a7 = arg(8)
a8 = arg(9)
a9 = arg(10)
parse value 'SOCKET'(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) with src res
return res
/*-----REXX/Socket Call Procedure-----------------------------------*/
SockRead:
dataline = ''
CRLF = '0D15'x
parse value Socket('Recv',sPort) with len response
if (src <> 0 ! len == 0) then do
  errmsg = "No response from Server"
  say 'err:' errmsg
  return errmsg
end
i=0
do until (response == '')
  i=i+1
  parse var response h.i '0D25'x response
end
h.0 = i
return len
